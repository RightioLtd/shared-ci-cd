name: üîç Determine Configuration

on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
      allowPrefix:
        required: false
        type: string

jobs:
  set-config:
    runs-on: ubuntu-latest
    environment: ${{ (inputs.branch == 'main' || inputs.branch == 'master') && 'production' || (inputs.branch == 'development') && 'development' || (inputs.branch == 'training' && 'training') || 'development' }}

    steps:
      - name: üîß Determine Environment and Set Variables
        id: set-env
        env:
          ALLOW_PREFIX: ${{ inputs.allowPrefix }}
        shell: bash
        run: |
          set -euo pipefail

          # Determine environment based on branch
          branch="${{ env.ENVIRONMENT }}"

          configuration="Debug"
          build_flag="dev"
          app_domain="${{ vars.DOMAIN }}-dev.co.uk"
          app_environment="development"

          case "$branch" in
            main|master)
              configuration="Release"
              build_flag="prod"
              app_domain="${{ vars.DOMAIN }}.co.uk"
              app_environment="production"
              ;;
            development)
              configuration="Debug"
              build_flag="dev"
              app_domain="${{ vars.DOMAIN }}-dev.co.uk"
              app_environment="development"
              ;;
            training)
              configuration="Debug"
              build_flag="train"
              app_domain="${{ vars.DOMAIN }}-train.co.uk"
              app_environment="training"
              ;;
            *)
              # Default is already set above for unmatched cases
              ;;
          esac

          echo "Creating artifact configuration.json"

          # Serialize vars and secrets into JSON strings provided by GitHub Actions
          vars_json='${{ toJson(vars) }}'

          # Handle secrets based on ALLOW_PREFIX, filtering appropriately
          if [ -z "${ALLOW_PREFIX:-}" ]; then
            secrets_json="{}"
          else
            secrets_json=$(jq --arg prefix "$ALLOW_PREFIX" \
              'to_entries | map(select(.key | startswith($prefix))) | from_entries' \
              <<< '${{ toJson(secrets) }}')
          fi

          # Filter out DEV/PROD keys depending on environment
          if [ "$app_environment" = "production" ]; then
            # Remove keys containing 'DEV'
            vars_json=$(jq 'with_entries(select(.key | test("DEV"; "i") | not))' <<< "$vars_json")
            secrets_json=$(jq 'with_entries(select(.key | test("DEV"; "i") | not))' <<< "$secrets_json")
          else
            # Non-production: remove keys containing 'PROD'
            vars_json=$(jq 'with_entries(select(.key | test("PROD"; "i") | not))' <<< "$vars_json")
            secrets_json=$(jq 'with_entries(select(.key | test("PROD"; "i") | not))' <<< "$secrets_json")
          fi

          # Normalize keys: remove _DEV_ or _PROD_
          vars_json=$(jq 'to_entries | map(.key |= sub("_(DEV|PROD)_"; "_"; "i")) | from_entries' <<< "$vars_json")
          secrets_json=$(jq 'to_entries | map(.key |= sub("_(DEV|PROD)_"; "_"; "i")) | from_entries' <<< "$secrets_json")

          # Create the final JSON configuration file
          jq -n \
            --arg configuration "$configuration" \
            --arg build_flag "$build_flag" \
            --arg app_domain "$app_domain" \
            --arg app_environment "$app_environment" \
            --argjson static_variables "$vars_json" \
            --argjson static_secrets "$secrets_json" \
            '{
              configuration: $configuration,
              build_flag: $build_flag,
              app_domain: $app_domain,
              app_environment: $app_environment,
              static_variables: $static_variables,
              static_secrets: $static_secrets
            }' > configuration.json

          echo "Configuration file created: configuration.json"

          # Set environment variables for GitHub Actions
          echo "app_environment=$app_environment" >> "$GITHUB_ENV"

          # Use GITHUB_OUTPUT instead of ::set-output (deprecated)
          echo "environment=$app_environment" >> "$GITHUB_OUTPUT"

      - name: Validate JSON File
        run: |
          echo "Configuration JSON:"
          cat configuration.json

      - name: üì§ Upload Configuration as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: configuration
          path: configuration.json

      - name: üìù Log Environment
        run: echo "The determined environment is ${{ steps.set-env.outputs.environment }}"
