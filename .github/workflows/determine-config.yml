name: üîç Determine Configuration

on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
      allowSecretsPrefix:
        required: false
        type: string
      mapToAppSettingsSecrets:
        required: false
        type: string

jobs:
  set-config:
    runs-on: ubuntu-latest
    environment: ${{ (inputs.branch == 'main' || inputs.branch == 'master') && 'production' || (inputs.branch == 'development') && 'development' || (inputs.branch == 'training' && 'training') || 'development' }}

    steps:
      # -------------------------------------------
      # Step 1: Prepare Environment Variables
      # -------------------------------------------
      - name: üîß Prepare Environment Variables
        run: |
          echo "ALLOW_PREFIX=${{ inputs.allowSecretsPrefix }}" >> $GITHUB_ENV
          echo "SELECTED_BRANCH=${{ inputs.branch }}" >> $GITHUB_ENV
          echo "MAP_TO_APPSETTINGS_SECRETS=${{ inputs.mapToAppSettingsSecrets }}" >> $GITHUB_ENV

      # -------------------------------------------
      # Step 2: Determine Configuration Settings
      # -------------------------------------------
      - name: üîß Determine Configuration Settings
        id: determine-config
        shell: bash
        env:
          SELECTED_BRANCH: ${{ env.SELECTED_BRANCH }}
          DOMAIN: ${{ vars.DOMAIN }}
        run: |
          set -euo pipefail

          branch="$SELECTED_BRANCH"
          configuration="Debug"
          build_flag="dev"
          app_domain="${DOMAIN}-dev.co.uk"
          app_environment="development"

          case "$branch" in
            main|master)
              configuration="Release"
              build_flag="prod"
              app_domain="${DOMAIN}.co.uk"
              app_environment="production"
              ;;
            development)
              # Use defaults
              ;;
            training)
              configuration="Debug"
              build_flag="train"
              app_domain="${DOMAIN}-train.co.uk"
              app_environment="training"
              ;;
            *)
              # Use defaults
              ;;
          esac

          echo "CONFIGURATION=$configuration" >> $GITHUB_ENV
          echo "BUILD_FLAG=$build_flag" >> $GITHUB_ENV
          echo "APP_DOMAIN=$app_domain" >> $GITHUB_ENV
          echo "APP_ENVIRONMENT=$app_environment" >> $GITHUB_ENV
          echo "environment=$app_environment" >> $GITHUB_OUTPUT

      # -------------------------------------------
      # Step 3: Extract Vars and Secrets (Raw)
      # -------------------------------------------
      - name: üîß Extract Vars and Secrets
        shell: bash
        run: |
          set -euo pipefail
          vars_json='${{ toJson(vars) }}'
          secrets_json='${{ toJson(secrets) }}'
          echo "RAW_VARS_JSON=$(echo "$vars_json" | jq -c .)" >> $GITHUB_ENV
          echo "RAW_SECRETS_JSON=$(echo "$secrets_json" | jq -c .)" >> $GITHUB_ENV

      # -------------------------------------------
      # Step 4: Remove SSH_ Secrets and Optionally Map to AppSettings
      # -------------------------------------------
      - name: üîß Process Secrets (Remove SSH_, Map if needed)
        shell: bash
        env:
          RAW_SECRETS_JSON: ${{ env.RAW_SECRETS_JSON }}
          MAP_TO_APPSETTINGS_SECRETS: ${{ env.MAP_TO_APPSETTINGS_SECRETS }}
        run: |
          set -euo pipefail

          # 1. Remove SSH_ secrets
          cleaned=$(echo "$RAW_SECRETS_JSON" | jq '
            to_entries
            | map(select(.key | startswith("SSH_") | not))
            | from_entries
          ')

          # 2. If mapToAppSettingsSecrets is provided, rename keys to start with APPSETTINGS__
          if [ -n "${MAP_TO_APPSETTINGS_SECRETS}" ]; then
            prefixes=$(echo "$MAP_TO_APPSETTINGS_SECRETS" | tr ',' ' ')
            for prefix in $prefixes; do
              cleaned=$(echo "$cleaned" | jq --arg prefix "$prefix" '
                to_entries
                | map(
                    if .key | startswith($prefix) then
                      .key = ("APPSETTINGS__" + (.key | sub("^" + $prefix; "")))
                    else
                      .
                    end
                  )
                | from_entries
              ')
            done
          fi

          echo "MAPPED_SECRETS_JSON=$(echo "$cleaned" | jq -c .)" >> $GITHUB_ENV

      # -------------------------------------------
      # Step 5: Environment-Based Filtering
      # -------------------------------------------
      - name: üîß Apply Environment-Based Filtering
        shell: bash
        env:
          APP_ENVIRONMENT: ${{ env.APP_ENVIRONMENT }}
          RAW_VARS_JSON: ${{ env.RAW_VARS_JSON }}
          MAPPED_SECRETS_JSON: ${{ env.MAPPED_SECRETS_JSON }}
        run: |
          set -euo pipefail
      
          # Re-parse the JSON to ensure we have proper JSON objects
          vars_json=$(echo "$RAW_VARS_JSON" | jq -c .)
          secrets_json=$(echo "$MAPPED_SECRETS_JSON" | jq -c .)
      
          if [ "$APP_ENVIRONMENT" = "production" ]; then
            # Always remove DEV keys, no exception
            vars_json=$(echo "$vars_json" | jq 'to_entries | map(select(.key | test("DEV"; "i") | not)) | from_entries')
            secrets_json=$(echo "$secrets_json" | jq 'to_entries | map(select(.key | test("DEV"; "i") | not)) | from_entries')
          else
            # Always remove PROD keys, no exception
            vars_json=$(echo "$vars_json" | jq 'to_entries | map(select(.key | test("PROD"; "i") | not)) | from_entries')
            secrets_json=$(echo "$secrets_json" | jq 'to_entries | map(select(.key | test("PROD"; "i") | not)) | from_entries')
          fi
      
          # Normalize keys: remove _DEV_ or _PROD_
          vars_json=$(echo "$vars_json" | jq 'to_entries | map(.key |= sub("_(DEV|PROD)_"; "_"; "i")) | from_entries')
          secrets_json=$(echo "$secrets_json" | jq 'to_entries | map(.key |= sub("_(DEV|PROD)_"; "_"; "i")) | from_entries')
      
          echo "ENV_FILTERED_VARS_JSON=$(echo "$vars_json" | jq -c .)" >> $GITHUB_ENV
          echo "ENV_FILTERED_SECRETS_JSON=$(echo "$secrets_json" | jq -c .)" >> $GITHUB_ENV
      

      # -------------------------------------------
      # Step 6: Prefix Filtering if Needed
      # -------------------------------------------
      - name: üîß Apply Prefix Filtering
        if: ${{ env.ALLOW_PREFIX != '' }}
        shell: bash
        env:
          ALLOW_PREFIX: ${{ env.ALLOW_PREFIX }}
          ENV_FILTERED_VARS_JSON: ${{ env.ENV_FILTERED_VARS_JSON }}
          ENV_FILTERED_SECRETS_JSON: ${{ env.ENV_FILTERED_SECRETS_JSON }}
        run: |
          set -euo pipefail
          vars_json="$ENV_FILTERED_VARS_JSON"
          secrets_json="$ENV_FILTERED_SECRETS_JSON"

          secrets_json=$(echo "$secrets_json" | jq --arg prefix "$ALLOW_PREFIX" '
            to_entries | map(select(.key | startswith($prefix))) | from_entries
          ')

          echo "VARS_JSON=$(echo "$vars_json" | jq -c .)" >> $GITHUB_ENV
          echo "SECRETS_JSON=$(echo "$secrets_json" | jq -c .)" >> $GITHUB_ENV

      - name: üîß No Prefix Filtering Needed
        if: ${{ env.ALLOW_PREFIX == '' }}
        run: |
          echo "VARS_JSON=${{ env.ENV_FILTERED_VARS_JSON }}" >> $GITHUB_ENV
          echo "SECRETS_JSON=${{ env.ENV_FILTERED_SECRETS_JSON }}" >> $GITHUB_ENV

      # -------------------------------------------
      # Step 7: Create configuration.json
      # -------------------------------------------
      - name: üìù Create configuration.json
        id: create-config-file
        shell: bash
        env:
          CONFIGURATION: ${{ env.CONFIGURATION }}
          BUILD_FLAG: ${{ env.BUILD_FLAG }}
          APP_DOMAIN: ${{ env.APP_DOMAIN }}
          APP_ENVIRONMENT: ${{ env.APP_ENVIRONMENT }}
          VARS_JSON: ${{ env.VARS_JSON }}
          SECRETS_JSON: ${{ env.SECRETS_JSON }}
        run: |
          set -euo pipefail
          echo "Creating artifact configuration.json"

          jq -n \
            --arg configuration "$CONFIGURATION" \
            --arg build_flag "$BUILD_FLAG" \
            --arg app_domain "$APP_DOMAIN" \
            --arg app_environment "$APP_ENVIRONMENT" \
            --argjson static_variables "$VARS_JSON" \
            --argjson static_secrets "$SECRETS_JSON" \
            '{
              configuration: $configuration,
              build_flag: $build_flag,
              app_domain: $app_domain,
              app_environment: $app_environment,
              static_variables: $static_variables,
              static_secrets: $static_secrets
            }' > configuration.json

      # -------------------------------------------
      # Step 8: Validate Configuration File
      # -------------------------------------------
      - name: ‚úÖ Validate JSON File
        run: |
          echo "Configuration JSON:"
          cat configuration.json

      # -------------------------------------------
      # Step 9: Upload Artifact
      # -------------------------------------------
      - name: üì§ Upload Configuration as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: configuration
          path: configuration.json

      # -------------------------------------------
      # Step 10: Log Determined Environment
      # -------------------------------------------
      - name: üìù Log Environment
        run: echo "The determined environment is ${{ steps.determine-config.outputs.environment }}"
