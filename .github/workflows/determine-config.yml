name: üîç Determine Configuration

on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
      allowPrefix:
        required: false
        type: string

jobs:
  set-config:
    runs-on: ubuntu-latest
    environment: ${{ (inputs.branch == 'main' || inputs.branch == 'master') && 'production' || (inputs.branch == 'development') && 'development' || (inputs.branch == 'training' && 'training') || 'development' }}

    steps:
      - name: üîß Determine Environment and Set Variables
        id: set-env
        env:
          ALLOW_PREFIX: ${{ inputs.allowPrefix }}
        shell: bash
        run: |
          # Determine environment based on branch
          branch="${{ env.ENVIRONMENT }}"
          case "$branch" in
            main|master)
              configuration="Release"
              build_flag="prod"
              app_domain="${{ vars.DOMAIN }}.co.uk"
              app_environment="production"
              ;;
            development)
              configuration="Debug"
              build_flag="dev"
              app_domain="${{ vars.DOMAIN }}-dev.co.uk"
              app_environment="development"
              ;;
            training)
              configuration="Debug"
              build_flag="train"
              app_domain="${{ vars.DOMAIN }}-train.co.uk"
              app_environment="training"
              ;;
            *)
              configuration="Debug"
              build_flag="dev"
              app_domain="${{ vars.DOMAIN }}-dev.co.uk"
              app_environment="development"
              ;;
          esac

          # Create artifact JSON
          echo "Creating artifact configuration.json"
          # Serialize vars and secrets into JSON strings provided by GitHub Actions
          vars_json='${{ toJson(vars) }}'

          # Serialize secrets into JSON, excluding those starting with SSH_
          # Filter secrets based on allowPrefix
          if [ -z "$ALLOW_PREFIX" ]; then
            secrets_json="{}"
          else
            secrets_json=$(jq --arg prefix "$ALLOW_PREFIX" '
              to_entries | map(select(.key | startswith($prefix))) | from_entries
            ' <<< '${{ toJson(secrets) }}')
          fi
          
          # Create the final JSON configuration dynamically
          jq -n \
          --arg configuration "$configuration" \
          --arg build_flag "$build_flag" \
          --arg app_domain "$app_domain" \
          --arg app_environment "$app_environment" \
          --argjson static_variables "$vars_json" \
            --argjson static_secrets "$secrets_json" \
            '{
              configuration: $configuration,
              build_flag: $build_flag,
              app_domain: $app_domain,
              app_environment: $app_environment,
              static_variables: $static_variables,
              static_secrets: $static_secrets
              }' > configuration.json
              
          echo "app_environment=$app_environment" >> $GITHUB_ENV
          echo "::set-output name=environment::$app_environment"

      - name: Validate JSON File
        run: |
          echo "Configuration JSON:"
          cat configuration.json

      - name: üì§ Upload Configuration as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: configuration
          path: configuration.json

      - name: üìù Log Environment
        run: echo "The determined environment is ${{ steps.set-env.outputs.environment }}"
