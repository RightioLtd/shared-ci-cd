name: üîç Determine Configuration

on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
      mapOrgSecretsToAppSettings: # This is the keys list to map secrets to AppSettings
        required: false
        type: string
      mapOrgVarsToAppSettings: # This is the keys list to map vars to AppSettings
        required: false
        type: string
      mapOrgSecretsToCustom: # This is the keys list to map secrets to Custom Secrets, for example, PUBLIC_ or REACT_APP_ or anything else, prefix is set in customSecretsPrefix
        required: false
        type: string
      mapOrgVarsToCustom: # This is the keys list to map vars to Custom Secrets, for example, PUBLIC_ or REACT_APP_ or anything else, prefix is set in customSecretsPrefix
        required: false
        type: string
      customSecretsPrefix: # This is the prefix for custom secrets, for example, PUBLIC_ or REACT_APP_ or anything else
        required: false
        type: string

      # Combination of the above can provide full set of secrets for Backend and Frontend applications.
      # Apps can be configured to read secrets and variables for backend .net core apps from AppSettings.json files.
      # Apps can be configured to read secrets and variables for frontend React apps from .env files. These use custom prefix.
      # List of keys to map needs to be explicitly provided, as it's not always needed and to avoid accidental mapping of all secrets.      
      # Custom prefix is needed to inject correct prefix for custom secrets.

jobs:
  set-config:
    runs-on: ubuntu-latest
    environment: ${{ (inputs.branch == 'main' || inputs.branch == 'master') && 'production' || (inputs.branch == 'development') && 'development' || (inputs.branch == 'training' && 'training') || 'development' }}

    steps:
      # Step 1: Prepare Environment Variables
      - name: üîß Prepare Environment Variables
        run: |
          echo "SELECTED_BRANCH=${{ inputs.branch }}" >> $GITHUB_ENV
          echo "MAP_TO_APPSETTINGS_SECRETS=${{ inputs.mapOrgSecretsToAppSettings }}" >> $GITHUB_ENV
          echo "MAP_TO_CUSTOM_SECRETS=${{ inputs.mapOrgSecretsToCustom }}" >> $GITHUB_ENV
          echo "MAP_TO_APPSETTINGS_VARS=${{ inputs.mapOrgVarsToAppSettings }}" >> $GITHUB_ENV
          echo "MAP_TO_CUSTOM_VARS=${{ inputs.mapOrgVarsToCustom }}" >> $GITHUB_ENV
          echo "CUSTOM_PREFIX=${{ inputs.customPrefix }}" >> $GITHUB_ENV

      # Step 2: Determine Configuration Settings
      - name: üîß Determine Configuration Settings
        id: determine-config
        shell: bash
        env:
          SELECTED_BRANCH: ${{ env.SELECTED_BRANCH }}
          DOMAIN: ${{ vars.DOMAIN }}
        run: |
          set -euo pipefail
          branch="$SELECTED_BRANCH"
          configuration="Debug"
          build_flag="dev"
          app_domain="${DOMAIN}-dev.co.uk"
          app_environment="development"
          case "$branch" in
            main|master)
              configuration="Release"
              build_flag="prod"
              app_domain="${DOMAIN}.co.uk"
              app_environment="production"
              ;;
            development) # Use defaults ;;
            training)
              configuration="Debug"
              build_flag="train"
              app_domain="${DOMAIN}-train.co.uk"
              app_environment="training"
              ;;
            *)
              # Use defaults
              ;;
          esac

          echo "CONFIGURATION=$configuration" >> $GITHUB_ENV
          echo "BUILD_FLAG=$build_flag" >> $GITHUB_ENV
          echo "APP_DOMAIN=$app_domain" >> $GITHUB_ENV
          echo "APP_ENVIRONMENT=$app_environment" >> $GITHUB_ENV
          echo "environment=$app_environment" >> $GITHUB_OUTPUT

      # Step 3: Extract Vars and Secrets (Raw)
      - name: üîß Extract Vars and Secrets
        shell: bash
        run: |
          set -euo pipefail
          vars_json='${{ toJson(vars) }}'
          secrets_json='${{ toJson(secrets) }}'
          echo "RAW_VARS_JSON=$(echo "$vars_json" | jq -c .)" >> $GITHUB_ENV
          echo "RAW_SECRETS_JSON=$(echo "$secrets_json" | jq -c .)" >> $GITHUB_ENV

      # Step 4: Process and Map Secrets to AppSettings/Custom Secrets
      - name: üîß Process Secrets (Map if needed)
        shell: bash
        env:
          RAW_SECRETS_JSON: ${{ env.RAW_SECRETS_JSON }}
          RAW_VARS_JSON: ${{ env.RAW_VARS_JSON }}
          MAP_TO_APPSETTINGS_SECRETS: ${{ env.MAP_TO_APPSETTINGS_SECRETS }}
          MAP_TO_CUSTOM_SECRETS: ${{ env.MAP_TO_CUSTOM_SECRETS }}
          MAP_TO_APPSETTINGS_VARS: ${{ env.MAP_TO_APPSETTINGS_VARS }}
          MAP_TO_CUSTOM_VARS: ${{ env.MAP_TO_CUSTOM_VARS }}
          CUSTOM_PREFIX: ${{ env.CUSTOM_PREFIX }}
        run: |
          set -euo pipefail

          # Add affix based on environment (i.e., _DEV for development and training, _PROD for production)
          affix=""
          if [[ "${APP_ENVIRONMENT}" == "production" ]]; then
            affix="_PROD"
          elif [[ "${APP_ENVIRONMENT}" == "development" || "${APP_ENVIRONMENT}" == "training" ]]; then
            affix="_DEV"
          fi

          # 1. Remove SSH_ secrets
          cleaned=$(echo "$RAW_SECRETS_JSON" | jq '
            to_entries
            | map(select(.key | startswith("SSH_") | not))
            | from_entries
          ')
          custom=$(echo "$RAW_SECRETS_JSON" | jq '
            to_entries
            | map(select(.key | startswith("SSH_") | not))
            | from_entries
          ')
          cleaned_vars=$(echo "$RAW_VARS_JSON" | jq '
            to_entries
            | map(select(.key | startswith("SSH_") | not))
            | from_entries
          ')
          custom_vars=$(echo "$RAW_VARS_JSON" | jq '
            to_entries
            | map(select(.key | startswith("SSH_") | not))
            | from_entries
          ')  

          # 2. If mapOrgSecretsToAppSettings: is provided, rename keys to start with APPSETTINGS__
          if [ -n "${MAP_TO_APPSETTINGS_SECRETS}" ]; then
            prefixes=$(echo "$MAP_TO_APPSETTINGS_SECRETS" | tr ',' ' ')
            for prefix in $prefixes; do
              cleaned=$(echo "$cleaned" | jq --arg prefix "$prefix" --arg affix "$affix" '
                to_entries
                | map(
                    if .key | startswith($prefix) then
                      .key = "APPSETTINGS__" + .key + $affix
                    else
                      . 
                    end
                  )
                | from_entries
              ')
            done
          fi

          # 3. If mapOrgSecretsToCustom: is provided, rename keys to start with CUSTOM_PREFIX
          if [ -n "${MAP_TO_CUSTOM_SECRETS}" ]; then
            prefixes=$(echo "$MAP_TO_CUSTOM_SECRETS" | tr ',' ' ')
            for prefix in $prefixes; do
              custom=$(echo "$custom" | jq --arg prefix "$prefix" --arg affix "$affix" '
                to_entries
                | map(
                    if .key | startswith($prefix) then
                      .key = "'"$CUSTOM_PREFIX"'" + .key + $affix
                    else
                      . 
                    end
                  )
                | from_entries
              ')
            done
          fi

          # 4. If mapOrgVarsToAppSettings: is provided, rename keys to start with APPSETTINGS__
          if [ -n "${MAP_TO_APPSETTINGS_VARS}" ]; then
            prefixes=$(echo "$MAP_TO_APPSETTINGS_VARS" | tr ',' ' ')
            for prefix in $prefixes; do
              cleaned_vars=$(echo "$cleaned_vars" | jq --arg prefix "$prefix" --arg affix "$affix" '
                to_entries
                | map(
                    if .key | startswith($prefix) then
                      .key = "APPSETTINGS__" + .key + $affix
                    else
                      . 
                    end
                  )
                | from_entries
              ')
            done
          fi

          # 5. If mapOrgVarsToCustom: is provided, rename keys to start with CUSTOM_PREFIX
          if [ -n "${MAP_TO_CUSTOM_VARS}" ]; then
            prefixes=$(echo "$MAP_TO_CUSTOM_VARS" | tr ',' ' ')
            for prefix in $prefixes; do
              custom_vars=$(echo "$custom_vars" | jq --arg prefix "$prefix" --arg affix "$affix" '
                to_entries
                | map(
                    if .key | startswith($prefix) then
                      .key = "'"$CUSTOM_PREFIX"'" + .key + $affix
                    else
                      . 
                    end
                  )
                | from_entries
              ')
            done
          fi

          echo "MAPPED_SECRETS_JSON=$(echo "$cleaned" | jq -c .)" >> $GITHUB_ENV
          echo "CUSTOM_SECRETS_JSON=$(echo "$custom" | jq -c .)" >> $GITHUB_ENV
          echo "MAPPED_VARS_JSON=$(echo "$cleaned_vars" | jq -c .)" >> $GITHUB_ENV
          echo "CUSTOM_VARS_JSON=$(echo "$custom_vars" | jq -c .)" >> $GITHUB_ENV

      # Step 5: Verify if all requested Vars and Secrets are mapped
      - name: üîç Verify All Requested Vars and Secrets are Mapped
        shell: bash
        env:
          MAP_TO_APPSETTINGS_SECRETS: ${{ env.MAP_TO_APPSETTINGS_SECRETS }}
          MAP_TO_APPSETTINGS_VARS: ${{ env.MAP_TO_APPSETTINGS_VARS }}
          MAP_TO_CUSTOM_SECRETS: ${{ env.MAP_TO_CUSTOM_SECRETS }}
          MAP_TO_CUSTOM_VARS: ${{ env.MAP_TO_CUSTOM_VARS }}
          MAPPED_SECRETS_JSON: ${{ env.MAPPED_SECRETS_JSON }}
          MAPPED_VARS_JSON: ${{ env.MAPPED_VARS_JSON }}
        run: |
          set -euo pipefail

          # Convert inputs to arrays
          IFS=',' read -ra APPSETTINGS_SECRETS <<< "$MAP_TO_APPSETTINGS_SECRETS"
          IFS=',' read -ra APPSETTINGS_VARS <<< "$MAP_TO_APPSETTINGS_VARS"
          IFS=',' read -ra CUSTOM_SECRETS <<< "$MAP_TO_CUSTOM_SECRETS"
          IFS=',' read -ra CUSTOM_VARS <<< "$MAP_TO_CUSTOM_VARS"

          # Flatten all expected keys
          all_requested_keys=("${APPSETTINGS_SECRETS[@]}" "${APPSETTINGS_VARS[@]}" "${CUSTOM_SECRETS[@]}" "${CUSTOM_VARS[@]}")

          # Check if each requested key exists in MAPPED_SECRETS_JSON and MAPPED_VARS_JSON
          missing_keys=()

          # Check in MAPPED_SECRETS_JSON
          for key in "${all_requested_keys[@]}"; do
            if ! echo "$MAPPED_SECRETS_JSON" | jq -e "has(\"$key\")" > /dev/null; then
              missing_keys+=("Secret: $key")
            fi
          done

          # Check in MAPPED_VARS_JSON
          for key in "${all_requested_keys[@]}"; do
            if ! echo "$MAPPED_VARS_JSON" | jq -e "has(\"$key\")" > /dev/null; then
              missing_keys+=("Var: $key")
            fi
          done

          # If there are missing keys, output them and fail the job
          if [ ${#missing_keys[@]} -gt 0 ]; then
            echo "ERROR: The following requested keys were not found in the mapped secrets/vars:"
            for missing_key in "${missing_keys[@]}"; do
              echo "$missing_key"
            done
            exit 1
          else
            echo "All requested keys have been successfully mapped."
          fi


      # Step 6: Merge Vars and Secrets into Single Objects and Replace __ with _ in Custom Vars/Secrets Only
      - name: üîß Merge Vars and Secrets and Replace __ with _ in Custom Vars/Secrets Only
        id: merge-vars-secrets
        shell: bash
        env:
          VARS_JSON: ${{ env.VARS_JSON }}
          SECRETS_JSON: ${{ env.SECRETS_JSON }}
          CUSTOM_SECRETS_JSON: ${{ env.CUSTOM_SECRETS_JSON }}
          CUSTOM_VARS_JSON: ${{ env.CUSTOM_VARS_JSON }}
        run: |
          set -euo pipefail

          # Validate that VARS_JSON and SECRETS_JSON are valid JSON before using them
          if [[ -z "$VARS_JSON" || "$(echo "$VARS_JSON" | jq type)" != '"object"' ]]; then
            echo "VARS_JSON is either empty or not valid JSON. Using empty object."
            VARS_JSON="{}"  # Set to empty object if invalid
          fi

          if [[ -z "$SECRETS_JSON" || "$(echo "$SECRETS_JSON" | jq type)" != '"object"' ]]; then
            echo "SECRETS_JSON is either empty or not valid JSON. Using empty object."
            SECRETS_JSON="{}"  # Set to empty object if invalid
          fi

          # Merge VARS_JSON with CUSTOM_VARS_JSON into a single vars object
          merged_vars=$(echo "{}" | jq --argjson vars "$VARS_JSON" --argjson custom_vars "$CUSTOM_VARS_JSON" '
            .vars = $vars + $custom_vars
          ')

          # Merge SECRETS_JSON with CUSTOM_SECRETS_JSON into a single secrets object
          merged_secrets=$(echo "{}" | jq --argjson secrets "$SECRETS_JSON" --argjson custom_secrets "$CUSTOM_SECRETS_JSON" '
            .secrets = $secrets + $custom_secrets
          ')

          # Replace __ with _ in keys for Custom Vars/Secrets only
          merged_vars=$(echo "$merged_vars" | jq 'to_entries | map(.key |= gsub("__"; "_")) | from_entries')
          merged_secrets=$(echo "$merged_secrets" | jq 'to_entries | map(.key |= gsub("__"; "_")) | from_entries')

          # Store the merged results
          echo "MERGED_VARS_JSON=$(echo "$merged_vars" | jq -c .)" >> $GITHUB_ENV
          echo "MERGED_SECRETS_JSON=$(echo "$merged_secrets" | jq -c .)" >> $GITHUB_ENV

      # -------------------------------------------
      # Step 7: Create configuration.json with merged Vars and Secrets
      # -------------------------------------------
      - name: üìù Create configuration.json
        id: create-config-file
        shell: bash
        env:
          CONFIGURATION: ${{ env.CONFIGURATION }}
          BUILD_FLAG: ${{ env.BUILD_FLAG }}
          APP_DOMAIN: ${{ env.APP_DOMAIN }}
          APP_ENVIRONMENT: ${{ env.APP_ENVIRONMENT }}
          MERGED_VARS_JSON: ${{ env.MERGED_VARS_JSON }}
          MERGED_SECRETS_JSON: ${{ env.MERGED_SECRETS_JSON }}
        run: |
          set -euo pipefail
          echo "Creating artifact configuration.json"

          jq -n \
            --arg configuration "$CONFIGURATION" \
            --arg build_flag "$BUILD_FLAG" \
            --arg app_domain "$APP_DOMAIN" \
            --arg app_environment "$APP_ENVIRONMENT" \
            --argjson merged_vars "$MERGED_VARS_JSON" \
            --argjson merged_secrets "$MERGED_SECRETS_JSON" \
            '{
              configuration: $configuration,
              build_flag: $build_flag,
              app_domain: $app_domain,
              app_environment: $app_environment,
              variables: $merged_vars,
              secrets: $merged_secrets
            }' > configuration.json

      # -------------------------------------------
      # Step 8: Validate Configuration File
      # -------------------------------------------
      - name: ‚úÖ Validate JSON File
        run: |
          echo "Configuration JSON:"
          cat configuration.json

      # -------------------------------------------
      # Step 9: Upload Artifact
      # -------------------------------------------
      - name: üì§ Upload Configuration as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: configuration
          path: configuration.json

      # -------------------------------------------
      # Step 10: Log Determined Environment
      # -------------------------------------------
      - name: üìù Log Environment
        run: echo "The determined environment is ${{ steps.determine-config.outputs.environment }}"
