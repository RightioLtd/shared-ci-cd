name: üîç Determine Configuration

on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
      allowSecretsPrefix:
        required: false
        type: string
      mapToAppSettingsSecrets:
        required: false
        type: string

jobs:
  set-config:
    runs-on: ubuntu-latest
    environment: ${{ (inputs.branch == 'main' || inputs.branch == 'master') && 'production' || (inputs.branch == 'development') && 'development' || (inputs.branch == 'training' && 'training') || 'development' }}

    steps:
      # -------------------------------------------
      # Step 1: Prepare Environment Variables
      # -------------------------------------------
      - name: üîß Prepare Environment Variables
        id: prepare-vars
        run: |
          echo "ALLOW_PREFIX=${{ inputs.allowSecretsPrefix }}" >> $GITHUB_ENV
          echo "SELECTED_BRANCH=${{ inputs.branch }}" >> $GITHUB_ENV
          echo "MAP_TO_APPSETTINGS_SECRETS=${{ inputs.mapToAppSettingsSecrets }}" >> $GITHUB_ENV

      # -------------------------------------------
      # Step 2: Determine Configuration Settings
      # -------------------------------------------
      - name: üîß Determine Configuration Settings
        id: determine-config
        shell: bash
        env:
          SELECTED_BRANCH: ${{ env.SELECTED_BRANCH }}
          DOMAIN: ${{ vars.DOMAIN }}
        run: |
          set -euo pipefail

          branch="$SELECTED_BRANCH"
          configuration="Debug"
          build_flag="dev"
          app_domain="${DOMAIN}-dev.co.uk"
          app_environment="development"

          case "$branch" in
            main|master)
              configuration="Release"
              build_flag="prod"
              app_domain="${DOMAIN}.co.uk"
              app_environment="production"
              ;;
            development)
              # Defaults already set
              ;;
            training)
              configuration="Debug"
              build_flag="train"
              app_domain="${DOMAIN}-train.co.uk"
              app_environment="training"
              ;;
            *)
              # Defaults remain as initially set
              ;;
          esac

          echo "CONFIGURATION=$configuration" >> $GITHUB_ENV
          echo "BUILD_FLAG=$build_flag" >> $GITHUB_ENV
          echo "APP_DOMAIN=$app_domain" >> $GITHUB_ENV
          echo "APP_ENVIRONMENT=$app_environment" >> $GITHUB_ENV
          echo "environment=$app_environment" >> $GITHUB_OUTPUT

      # -------------------------------------------
      # Step 3: Filter Variables and Secrets
      # -------------------------------------------
      - name: üîß Filter Variables and Secrets
        id: filter-vars
        shell: bash
        env:
          APP_ENVIRONMENT: ${{ env.APP_ENVIRONMENT }}
          ALLOW_PREFIX: ${{ env.ALLOW_PREFIX }}
        run: |
          set -euo pipefail

          # Convert vars to JSON
          vars_json='${{ toJson(vars) }}'

          # Handle secrets based on the allowed prefix
          if [ -z "${ALLOW_PREFIX:-}" ]; then
            secrets_json="{}"
          else
            secrets_json=$(jq --arg prefix "$ALLOW_PREFIX" \
              'to_entries | map(select(.key | startswith($prefix))) | from_entries' \
              <<< '${{ toJson(secrets) }}')
          fi

          # Environment-based filtering of keys
          # Remove DEV-related keys for production, and PROD-related keys for non-production
          if [ "$APP_ENVIRONMENT" = "production" ]; then
            vars_json=$(jq 'with_entries(select(.key | test("DEV"; "i") | not))' <<< "$vars_json")
            secrets_json=$(jq 'with_entries(select(.key | test("DEV"; "i") | not))' <<< "$secrets_json")
          else
            vars_json=$(jq 'with_entries(select(.key | test("PROD"; "i") | not))' <<< "$vars_json")
            secrets_json=$(jq 'with_entries(select(.key | test("PROD"; "i") | not))' <<< "$secrets_json")
          fi

          # Normalize keys: remove _DEV_ or _PROD_
          vars_json=$(jq 'to_entries | map(.key |= sub("_(DEV|PROD)_"; "_"; "i")) | from_entries' <<< "$vars_json")
          secrets_json=$(jq 'to_entries | map(.key |= sub("_(DEV|PROD)_"; "_"; "i")) | from_entries' <<< "$secrets_json")

          # Write filtered JSON to environment
          # Use jq -c to ensure single-line output suitable for GITHUB_ENV
          vars_json_compact=$(echo "$vars_json" | jq -c .)
          secrets_json_compact=$(echo "$secrets_json" | jq -c .)

          echo "VARS_JSON=$vars_json_compact" >> $GITHUB_ENV
          echo "SECRETS_JSON=$secrets_json_compact" >> $GITHUB_ENV

      # -------------------------------------------
      # Step 4: Optionally Map Secrets to AppSettings Format
      # -------------------------------------------
      - name: üîß Map Secrets to AppSettings Format (Optional)
        if: ${{ env.MAP_TO_APPSETTINGS_SECRETS != '' }}
        id: map-to-appsettings
        shell: bash
        env:
          MAP_TO_APPSETTINGS_SECRETS: ${{ env.MAP_TO_APPSETTINGS_SECRETS }}
          SECRETS_JSON: ${{ env.SECRETS_JSON }}
        run: |
          set -euo pipefail

          # Split the comma-separated list of prefixes
          prefixes=$(echo "$MAP_TO_APPSETTINGS_SECRETS" | tr ',' ' ')

          transformed="$SECRETS_JSON"

          # For each prefix, rename keys starting with that prefix to APPSETTINGS__<rest_of_key>
          for prefix in $prefixes; do
            transformed=$(jq --arg prefix "$prefix" '
              to_entries
              | map(
                  if .key | startswith($prefix) then
                    .key = ("APPSETTINGS__" + (.key | sub("^" + $prefix; "")))
                  else
                    .
                  end
                )
              | from_entries
            ' <<< "$transformed")
          done

          # Convert to single-line before writing to GITHUB_ENV
          transformed_compact=$(echo "$transformed" | jq -c .)
          echo "SECRETS_JSON=$transformed_compact" >> $GITHUB_ENV

      # -------------------------------------------
      # Step 5: Create configuration.json Artifact
      # -------------------------------------------
      - name: üìù Create configuration.json
        id: create-config-file
        shell: bash
        env:
          CONFIGURATION: ${{ env.CONFIGURATION }}
          BUILD_FLAG: ${{ env.BUILD_FLAG }}
          APP_DOMAIN: ${{ env.APP_DOMAIN }}
          APP_ENVIRONMENT: ${{ env.APP_ENVIRONMENT }}
          VARS_JSON: ${{ env.VARS_JSON }}
          SECRETS_JSON: ${{ env.SECRETS_JSON }}
        run: |
          set -euo pipefail
          echo "Creating artifact configuration.json"

          jq -n \
            --arg configuration "$CONFIGURATION" \
            --arg build_flag "$BUILD_FLAG" \
            --arg app_domain "$APP_DOMAIN" \
            --arg app_environment "$APP_ENVIRONMENT" \
            --argjson static_variables "$VARS_JSON" \
            --argjson static_secrets "$SECRETS_JSON" \
            '{
              configuration: $configuration,
              build_flag: $build_flag,
              app_domain: $app_domain,
              app_environment: $app_environment,
              static_variables: $static_variables,
              static_secrets: $static_secrets
            }' > configuration.json

      # -------------------------------------------
      # Step 6: Validate Configuration File
      # -------------------------------------------
      - name: ‚úÖ Validate JSON File
        run: |
          echo "Configuration JSON:"
          cat configuration.json

      # -------------------------------------------
      # Step 7: Upload Artifact
      # -------------------------------------------
      - name: üì§ Upload Configuration as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: configuration
          path: configuration.json

      # -------------------------------------------
      # Step 8: Log Determined Environment
      # -------------------------------------------
      - name: üìù Log Environment
        run: echo "The determined environment is ${{ steps.determine-config.outputs.environment }}"
